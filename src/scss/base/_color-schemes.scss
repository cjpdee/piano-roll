/**
 * Switches the global color scheme based on a class at the app root.
 * Requires all colors to be set using custom placeholders e.g. %background-dark
 * 
 * Next: write a function which derives all tones from a single base color
 */

 // name the schemes whatever you like
 // in future I might add ability to name tones whatever you want and have unlimited tones
$schemes: (
    "scheme1": (
        text: white,
        lighter: skyblue,
        light: #5077CC,
        base: #677595,
        dark: #324A80,
        darker: #1E2D4D
    ),
    "scheme2": (
        text: white,
        lighter: #7CCCB3,
        light: #3FCC9F,
        base: #5B9582,
        dark: #288064,
        darker: #184D3C
    ),
);

$properties: (color,background,border-color);

// write a single property to specific tone for all schemes
@mixin write-scheme-property($property,$tone) {
    @each $schemeName,$schemeMap in $schemes {
        .#{$schemeName} & {
            #{$property}: map-get($schemeMap,$tone);
        }
    }
}

// write all properties for a certain tone
@mixin write-tone($tone) {
    @each $prop in $properties {
        %#{$prop}-#{$tone} {
            @include write-scheme-property($prop,$tone);
        }
    }
}

@mixin write-all-schemes() {
    @each $tone in text, lighter, light, base, dark, darker {
        @include write-tone($tone);
    }
}

@include write-all-schemes;
